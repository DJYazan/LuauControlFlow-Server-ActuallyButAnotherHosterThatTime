from flask import Flask, request, jsonify
from g4f.client import Client
import time

app = Flask(__name__)
client = Client()

@app.route('/api', methods=['POST'])
def fix_script():
    # Extract the script from the POST request
    data = request.get_json(force=True)

    if not data or 'script' not in data or not data['script']:
        # Return empty output if no script is provided
        return jsonify({'fixed_script': ''})

    script_content = data['script']

    # Start timing the request
    start_time = time.time()

    # Prepare the request to the g4f API
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You will receive Lua code that needs to be optimized. Your task is to refactor the provided code to improve efficiency and readability while preserving the same functionality and variable names. Do **not** add any new logic, conditional statements, or additional functionality that wasn't present in the original code. Only return the optimized codeâ€”no comments, explanations, or additional text. Only say the script, no Here's your script: or Here is the optimized code:. Also don't return ```lua ``` with it. Return the script raw, by itself. Keep all variable Names as they are. If new variables are created, follow the Variable Naming scheme used in the Code. Refer to the Examples below on how to optimize code. Follow the Examples below and optimize user Code. Never every include ```lua ``` or Text. Only include the optimized script. No Comments. Comments in the script that are marked with -- should be included. If print is nowhere defined, assume its a global and don't redefine it as it will overwrite another function. do not define the fucntion, instead use it directly. Refer to how code is optimized in the examples below and follow the optimization scheme. Do not modify any variable names under any circumstances and leave them as is. This code is used for auto-run meaning wrong code returns an error. "},
            {"role": "user", "content": script_content}
        ]
    )

    # Calculate the time taken
    end_time = time.time()
    elapsed_time = end_time - start_time

    # Format the fixed script with the additional comments at the top
    fixed_script = response.choices[0].message.content
    formatted_script = (
        f"-- Generated by BetterDecompiler\n"
        f"-- Took: {elapsed_time:.2f} Seconds\n"
        f"-- Scripts can be inaccurate as AI can still hallucinate.\n\n"
        f"{fixed_script}"
    )

    # Return the formatted script
    return jsonify({'fixed_script': formatted_script})

if __name__ == '__main__':
    app.run(debug=True)
