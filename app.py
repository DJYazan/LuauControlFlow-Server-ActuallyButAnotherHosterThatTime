from flask import Flask, request, jsonify
from g4f.client import Client
import time

app = Flask(__name__)
client = Client()

@app.route('/api', methods=['POST'])
def fix_script():
    # Extract the script from the POST request
    data = request.get_json(force=True)

    if not data or 'script' not in data or not data['script']:
        # Return empty output if no script is provided
        return jsonify({'fixed_script': ''})

    script_content = data['script']

    # Start timing the request
    start_time = time.time()

    # Prepare the request to the g4f API
    response = client.chat.completions.create(
        model="gpt-4o",
        messages=[
            {"role": "system", "content": "You will receive Lua code that needs to be optimized. Your task is to refactor the provided code to improve efficiency and readability while preserving the same functionality and variable names. Do **not** add any new logic, conditional statements, or additional functionality that wasn't present in the original code. Only return the optimized codeâ€”no comments, explanations, or additional text. Only say the script, no "Here's your script:" or "Here is the optimized code:". Also don't return ```lua ``` with it. Return the script raw, by itself. Keep all variable Names as they are. If new variables are created, follow the Variable Naming scheme used in the Code. Refer to the Examples below on how to optimize code. Follow the Examples below and optimize user Code. Never every include ```lua ``` or Text. Only include the optimized script. No Comments. Comments in the script that are marked with -- should be included. If print is nowhere defined, assume its a global and don't redefine it as it will overwrite another function. do not define the fucntion, instead use it directly. Refer to how code is optimized in the examples below and follow the optimization scheme. Do not modify any variable names under any circumstances and leave them as is. This code is used for auto-run meaning wrong code returns an error. **Example 1:** Unoptimized Code: lua local v1 = {} local v2 = nil v1.csgo = v2 v2 = "HE" v1.car = v2 v2 = ":" v1.example = v2 v1.example2 = v2 v2 = 0 v2.num = v2 v2 = {} v2.s = false v2.camlock = v2 Optimized Code: lua local v1 = {     csgo = nil,     car = "HE",     example = ":",     example2 = ":",     num = 0,     camlock = { s = false } } **Example 2:** Unoptimized Code: lua local v0 = {} local v1 = "Name" local v2 = "Value" v0[v1] = v2 v1 = "Age" v2 = 30 v0[v1] = v2 v1 = "Country" v2 = "USA" v0[v1] = v2 Optimized Code: lua local v0 = {     Name = "Value",     Age = 30,     Country = "USA" } **Example 3:** Unoptimized Code: lua local v0 = {} local v1 = {} local v2 = "Hello" local v3 = "World" v1[v2] = v3 v0[v2] = v1 v1 = {} v2 = "Another" v3 = "Entry" v1[v2] = v3 v0[v2] = v1 Optimized Code: lua local v0 = {     Hello = { World = "World" },     Another = { Another = "Entry" } } **Example 4:** Unoptimized Code: lua local v0 = {} local v1 = {} local v2 = 1 v1[v2] = "One" v2 = 2 v1[v2] = "Two" v2 = 3 v1[v2] = "Three" v0["Numbers"] = v1 Optimized Code: lua local v0 = {     Numbers = {         [1] = "One",         [2] = "Two",         [3] = "Three"     } } **Example 5:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.a = 1 v1.b = 2 v1.c = 3 v0["Values"] = v1 Optimized Code: lua local v0 = {     Values = {         a = 1,         b = 2,         c = 3     } } **Example 6:** Unoptimized Code: lua local v0 = {} local v1 = "data" local v2 = "value" v0[v1] = v2 local v3 = {} local v4 = "item" local v5 = "details" v3[v4] = v5 v0["info"] = v3 Optimized Code: lua local v0 = {     data = "value",     info = {         item = "details"     } } **Example 7:** Unoptimized Code: lua local v0 = {} local v1 = "key1" local v2 = "value1" local v3 = "key2" local v4 = "value2" v0[v1] = v2 v0[v3] = v4 Optimized Code: lua local v0 = {     key1 = "value1",     key2 = "value2" } **Example 8:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.name = "Alice" v1.age = 30 v1.city = "New York" v0.person = v1 Optimized Code: lua local v0 = {     person = {         name = "Alice",         age = 30,         city = "New York"     } } **Example 9:** Unoptimized Code: lua local v0 = {} local v1 = "a" local v2 = "b" local v3 = "c" v0[v1] = 1 v0[v2] = 2 v0[v3] = 3 Optimized Code: lua local v0 = {     a = 1,     b = 2,     c = 3 } **Example 10:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.x = 10 v1.y = 20 v1.z = 30 v0.coordinates = v1 Optimized Code: lua local v0 = {     coordinates = {         x = 10,         y = 20,         z = 30     } } **Example 11:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.key1 = "value1" v1.key2 = "value2" v0.subTable = v1 v1 = {} v1.key3 = "value3" v1.key4 = "value4" v0.anotherTable = v1 Optimized Code: lua local v0 = {     subTable = {         key1 = "value1",         key2 = "value2"     },     anotherTable = {         key3 = "value3",         key4 = "value4"     } } **Example 12:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.first = "one" v1.second = "two" v1.third = "three" v0.numbers = v1 Optimized Code: lua local v0 = {     numbers = {         first = "one",         second = "two",         third = "three"     } } **Example 13:** Unoptimized Code: lua local v0 = {} local v1 = "keyA" local v2 = "valueA" local v3 = "keyB" local v4 = "valueB" v0[v1] = v2 v0[v3] = v4 Optimized Code: lua local v0 = {     keyA = "valueA",     keyB = "valueB" } **Example 14:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.red = "#FF0000" v1.green = "#00FF00" v1.blue = "#0000FF" v0.colors = v1 Optimized Code: lua local v0 = {     colors = {         red = "#FF0000",         green = "#00FF00",         blue = "#0000FF"     } } **Example 15:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.apple = 1 v1.banana = 2 v1.cherry = 3 v0.fruits = v1 Optimized Code: lua local v0 = {     fruits = {         apple = 1,         banana = 2,         cherry = 3     } } **Example 16:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.key1 = "value1" v1.key2 = "value2" v1.key3 = "value3" v0.table1 = v1 local v2 = {} v2.keyA = "valueA" v2.keyB = "valueB" v0.table2 = v2 Optimized Code: lua local v0 = {     table1 = {         key1 = "value1",         key2 = "value2",         key3 = "value3"     },     table2 = {         keyA = "valueA",         keyB = "valueB"     } } **Example 17:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.width = 100 v1.height = 200 v1.depth = 300 v0.dimensions = v1 Optimized Code: lua local v0 = {     dimensions = {         width = 100,         height = 200,         depth = 300     } } **Example 18:** Unoptimized Code: lua local v 0 = {} local v1 = {} v1.name = "John" v1.age = 25 v1.city = "Los Angeles" v0.person = v1 Optimized Code: lua local v0 = {     person = {         name = "John",         age = 25,         city = "Los Angeles"     } } **Example 19:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.firstName = "Alice" v1.lastName = "Smith" v0.user = v1 Optimized Code: lua local v0 = {     user = {         firstName = "Alice",         lastName = "Smith"     } } **Example 20:** Unoptimized Code: lua local v0 = {} local v1 = {} v1.x = 10 v1.y = 20 v1.z = 30 v0.coordinates = v1 Optimized Code: lua local v0 = {     coordinates = {         x = 10,         y = 20,         z = 30     } } **Example 21:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = wait     local v4 = true     repeat v3() until v4 end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     repeat wait() until true end) **Example 22:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = print     local v4 = "Hello"     v3(v4) end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     print("Hello") end) **Example 23:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = math.sqrt     local v4 = 16     local v5 = v3(v4) end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     math.sqrt(16) end) **Example 24:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = os.time     local v4 = v3()     local v5 = os.date     local v6 = v5("%Y-%m-%d", v4) end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     os.date("%Y-%m-%d", os.time()) end) **Example 25:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = io.open     local v4 = "file.txt"     local v5 = "r"     local v6 = v3(v4, v5)     local v7 = v6:read("*all")     v6:close() end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     local file = io.open("file.txt", "r")     local content = file:read("*all")     file:close() end) **Example 26:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = table.insert     local v4 = {}     local v5 = "item"     v3(v4, v5) end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     table.insert({}, "item") end) **Example 27:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = string.lower     local v4 = "HELLO"     local v5 = v3(v4) end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     string.lower("HELLO") end) **Example 28:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = math.random     local v4 = 1     local v5 = 10     local v6 = v3(v4, v5) end v1 = v1(v2) Optimized Code: lua v1 = pcall(function()     math.random(1, 10) end) **Example 29:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = coroutine.create     local v4 = function() end     local v5 = v3(v4) end v1 = v1(v2) Optimized Code: lua v1 = pcall(coroutine.create, function() end) **Example 30:** Unoptimized Code: lua local v1 = pcall local v2 = function()     local v3 = debug.getinfo     local v4 = 1     local v5 = v3(v4) end v1 = v1(v2) Optimized Code: lua v1 = pcall(debug.getinfo, 1) --- optimize this code and follow the instructions above while doing so."},
            {"role": "user", "content": script_content}
        ]
    )

    # Calculate the time taken
    end_time = time.time()
    elapsed_time = end_time - start_time

    # Format the fixed script with the additional comments at the top
    fixed_script = response.choices[0].message.content
    formatted_script = (
        f"-- Generated by BetterDecompiler\n"
        f"-- Took: {elapsed_time:.2f} Seconds\n"
        f"-- Scripts can be inaccurate as AI can still hallucinate.\n\n"
        f"{fixed_script}"
    )

    # Return the formatted script
    return jsonify({'fixed_script': formatted_script})

if __name__ == '__main__':
    app.run(debug=True)
